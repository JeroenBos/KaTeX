name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false # minimize exposure and prevent accidental pushes

    - name: Enable Corepack
      run: corepack enable

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: yarn

    - name: Install dependencies
      run: yarn --immutable
      env:
        YARN_ENABLE_SCRIPTS: 0 # disable postinstall scripts

    - name: Lint code
      run: yarn test:lint

    - name: Run Flow
      run: yarn test:flow
      if: always()

    - name: Run Jest tests
      run: yarn test:jest
      if: always()

    - name: Build
      run: yarn build

  release:
    name: release${{ github.ref != 'refs/heads/main' && ' (dry-run)' || '' }}
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Enable Corepack
      run: corepack enable

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://npm.pkg.github.com'
        token: ${{ secrets.GH_TOKEN }}

    - name: Authenticate to GitHub Packages
      run: |
        echo "@JeroenBos:registry=https://npm.pkg.github.com"           >  ./.npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ./.npmrc

    - name: Install dependencies
      run: yarn --immutable
      env:
        YARN_ENABLE_SCRIPTS: 0 # disable postinstall scripts

    - name: Build
      run: yarn build
        
    - name: Run semantic-release
      if: false
      run: yarn run semantic-release --debug
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        GIT_AUTHOR_NAME: Jeroen Bos
        GIT_AUTHOR_EMAIL: 15310631+JeroenBos@users.noreply.github.com
        GIT_COMMITTER_NAME: Jeroen Bos
        GIT_COMMITTER_EMAIL: 15310631+JeroenBos@users.noreply.github.com

    # PRERELEASE:
    # if the version is of format `X.Y.Z`, then only publish if we're on main; do a dry run otherwise.
    # if the version is of format `X.Y.Z-.*, then publish if we're not on main; otherwise error

    - name: Get version
      id: versioning
      run: |
        VERSION="$(jq -r '.version' package.json)"
        npm view "@jeroenbos/katex@$VERSION" --registry=https://npm.pkg.github.com --json && EXISTS=true || EXISTS=false 1>/dev/null
        PRERELEASE=$([[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-.*$ ]] && echo true || echo false)"
        DRY_RUN="$([[ "$PRERELEASE" == "true" ]] && echo false || echo ${{ github.ref != 'refs/heads/main' && true || false }})"

        if [[ "$PRERELEASE" == "true" && "${{ github.ref == 'refs/heads/main' }}" == "true" ]]; then
          echo "Can't publish prerelease version '$VERSION'"
          exit 1
        fi

        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$ ]]; then
          echo "Invalid version format; expected '^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+(-.*)?$', but got '$VERSION'"
          exit 1
        fi
        
        echo "version=$VERSION"        | tee --append $GITHUB_OUTPUT
        echo "exists=$EXISTS"          | tee --append $GITHUB_OUTPUT
        echo "pre-release=$PRERELEASE" | tee --append $GITHUB_OUTPUT
        echo "dry-run=$DRY_RUN"        | tee --append $GITHUB_ENV

    - name: Publish to GitHub Packages
      # only publish a new version if the version in package.json has been updated, OR we're doing a dry-run
      if: steps.versioning.outputs.pre-release == 'false' && (steps.versioning.outputs.exists == 'false' || env.dry-run == 'true')
      run: npm publish --tag jeroenbos/katex@${{ steps.versioning.outputs.version }} ${{ env.dry-run == 'true' && '--dry-run' || '' }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    